<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://paz.coding.me</id>
    <title>PPP的博客</title>
    <updated>2019-09-11T05:14:57.402Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://paz.coding.me"/>
    <link rel="self" href="https://paz.coding.me/atom.xml"/>
    <subtitle>望远能知风浪小，凌空始觉海波平</subtitle>
    <logo>https://paz.coding.me/images/avatar.png</logo>
    <icon>https://paz.coding.me/favicon.ico</icon>
    <rights>All rights reserved 2019, PPP的博客</rights>
    <entry>
        <title type="html"><![CDATA[cookie+springboot的简单示范]]></title>
        <id>https://paz.coding.me/post/cookie-jian-dan-shi-yong-shi-fan</id>
        <link href="https://paz.coding.me/post/cookie-jian-dan-shi-yong-shi-fan">
        </link>
        <updated>2019-09-10T15:54:43.000Z</updated>
        <summary type="html"><![CDATA[<p><em>在web项目开发中，会话维持是被经常使用到的技术。但是现在有的博客里有和springboot结合的比较少，有完整代码的就更难找到了，于是最近我会抽时间写下与之相关的技术。</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>在web项目开发中，会话维持是被经常使用到的技术。但是现在有的博客里有和springboot结合的比较少，有完整代码的就更难找到了，于是最近我会抽时间写下与之相关的技术。</em></p>
<!-- more -->
<h3 id="简介">简介</h3>
<p>cookie保存在浏览器中，可以用于存储描述用户/服务端信息。<strong>网站的cookie在浏览器一经设置，此后再向该网站发送请求时，均会带上cookie信息</strong>。由于这个原因它在会话维持中，被使用的特别广泛。比如：某一购物网站，在用户登陆时，服务端要求浏览器保存一条能唯一标识用户身份的信息，此设置完成后，用户进行诸如查看个人信息、订单的时候均会自动带上此cookie。</p>
<h3 id="分类">分类</h3>
<h4 id="1-存储位置">1. 存储位置</h4>
<ul>
<li><strong>内存</strong>：存储于内存中的cookie，当浏览器关闭时便会丢失。</li>
<li><strong>硬盘</strong>：存储于硬盘中的cookie</li>
</ul>
<p>默认均为内存cookie，能保存于硬盘的cookie限制条件会比较多。</p>
<h4 id="2-维持时间">2. 维持时间</h4>
<ul>
<li><strong>长期</strong>：有效期很久</li>
<li><strong>短期</strong>：有效期比较短暂</li>
</ul>
<p>当然，cookie的有效期是可以认为设置的，下面的代码中也会有提及到，详细的可以查看<a href="https://blog.csdn.net/WJLONG_123/article/details/78246995">这里</a>。</p>
<h3 id="其他属性">其他属性</h3>
<ul>
<li>secure ：是否要求通过https传递cookie</li>
<li>Size：大小的设置</li>
<li>http：要求只有http请求头中带有cookie</li>
<li><strong>expires/Max-Age</strong>：超时时间</li>
<li>domain：可以访问此cookie的域名</li>
<li>path：只有域名的该路径下的页面可以访问cookie</li>
<li>name：键</li>
<li>value：值</li>
</ul>
<h3 id="上手">上手</h3>
<h4 id="使用idea建立springboot项目">使用idea建立springboot项目</h4>
<p>一路点下去即可：<br>
<img src="https://paz.coding.me/post-images/1568171060424.png" alt=""></p>
<h4 id="在pomxml中导入依赖">在pom.xml中导入依赖</h4>
<pre><code class="language-xml"> &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
</code></pre>
<h4 id="配置web">配置web</h4>
<pre><code>	#thymeleaf：
#前缀 注意最后的“/”
spring.thymeleaf.prefix=classpath:/templates/
#后缀
spring.thymeleaf.suffix=.html
#类型
spring.thymeleaf.servlet.content-type=text/html
#语法
spring.thymeleaf.mode=LEGACYHTML5
#模板缓存
spring.thymeleaf.cache=false
#静态文件位置
spring.mvc.static-path-pattern=/static/**
</code></pre>
<h4 id="建立indexhtml和indexjs文件">建立index.html和index.js文件</h4>
<p>项目目录为：<br>
<img src="https://paz.coding.me/post-images/1568171689524.png" alt=""></p>
<pre><code class="language-javascript">//向后台服务器发送请求cookie的请求
function setCookie() {
    $.ajax({
        url:&quot;/cookies&quot;,
        type:&quot;POST&quot;,
        success:function (result) {
            alert(result);
        }
    })
}

//向后台服务器发送字符串的同时获得cookie
function sendWithCookie() {
    $.ajax({
        url:&quot;/cookies/sessionID&quot;,
        type:&quot;GET&quot;,
        success:function (result) {
            alert(result);
        }
    })
}
</code></pre>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;cookie学习&lt;/title&gt;
    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;/static/index.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;button onclick=&quot;setCookie()&quot;&gt;设置cookie&lt;/button&gt;
&lt;button onclick=&quot;sendWithCookie()&quot;&gt;发送带cookie请求&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="建立controller类">建立Controller类</h4>
<pre><code class="language-java">@Controller
public class MainController {
    private static final String TAG=&quot;MainController&quot;;

    @RequestMapping(&quot;/&quot;)
    public String index(){
        return &quot;index&quot;;
    }
	 //获取带有cookie的普通http请求
    @ResponseBody
    @RequestMapping(value = &quot;/cookies/{key}&quot;)
    public String getCookies(HttpServletRequest request, 
		@PathVariable String key){
        String result=&quot;未获取到sessionID&quot;;
        Cookie[] cookies = request.getCookies();
        if (cookies!=null){
						//需要遍历
            for (Cookie cookie:cookies){
                if (&quot;sessionID&quot;.equals(cookie.getName())){
                    result = &quot;sessionID:&quot; + cookie.getValue();
                }
            }
        }
        return result;
    }
		//设置cookie
    @ResponseBody
    @RequestMapping(value = &quot;/cookies&quot;, method = RequestMethod.POST)
    public String setCookies(HttpServletResponse response) {
        String result = &quot;服务器出现错误&quot;;
        response.setStatus(500);
        try{
            Cookie cookie = new Cookie(&quot;sessionID&quot;, &quot;PPP&quot;);
            //设置有效期 单位是秒，不是毫秒
            cookie.setMaxAge(20*60);
            response.addCookie(cookie);
            response.setStatus(200);
            result = &quot;cookie设置完成&quot;;
        }catch (Exception e){
            System.err.println(TAG+&quot; :发生错误&quot;);
            System.err.println(e.getMessage());
        }
        return result;
    }
}
</code></pre>
<h3 id="测试">测试</h3>
<p><img src="https://paz.coding.me/post-images/1568177243936.png" alt=""></p>
<center>设置cookie</center>
<p><img src="https://paz.coding.me/post-images/1568177455911.png" alt=""></p>
<center>可以看到浏览器中已经保存了cookie</center>
<p><img src="https://paz.coding.me/post-images/1568177627756.png" alt=""></p>
<center>后台也拿到了cookie，并作为返回值，返回给了前台</center>
<h3 id="参考感谢">参考&amp;感谢</h3>
<p><a href="https://blog.csdn.net/WJLONG_123/article/details/78246995">cookie属性及有效期的设置</a></p>
<p><a href="https://www.cnblogs.com/bq-med/p/8603664.html">Http协议中Cookie详细介绍</a></p>
<p><a href="https://www.cnblogs.com/SiriYang/p/10680483.html">Springboot使用Cookie，生成cookie，获取cookie信息（注解与非注解方式）</a></p>
<p><a href="https://www.cnblogs.com/xiaocongcong888/p/9436274.html">SPRINGBOOTDAY03 COOKIE和SESSION 购物车技术</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前后端分离中的Rest&Restful架构]]></title>
        <id>https://paz.coding.me/post/qian-hou-duan-fen-chi-zhong-de-rest-he-restful-jia-gou</id>
        <link href="https://paz.coding.me/post/qian-hou-duan-fen-chi-zhong-de-rest-he-restful-jia-gou">
        </link>
        <updated>2019-09-08T14:31:43.000Z</updated>
        <summary type="html"><![CDATA[<p><em>----最近在接触spring cloud的时候，经常会看见Rest&amp;Restful的字眼，又对这两个词完全没有印象，于是去了解了下，现在我们从传统API的缺点开始讲起</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>----最近在接触spring cloud的时候，经常会看见Rest&amp;Restful的字眼，又对这两个词完全没有印象，于是去了解了下，现在我们从传统API的缺点开始讲起</em></p>
<!--more-->
<h3 id="传统api接口">传统API接口</h3>
<p>以我的观点，应用是以数据为逻辑中心的，对于数据的操作不外乎增删改查四种。http协议针对这四种操作分别提供了POST、DELETE，PUT、GET四种方法，简单优雅。但是我们以往在写服务端API的时候，往往会用GET和POST解决一切，背离http协议设计的初衷。更窒息的是，混乱还不仅仅如此。<br>
URL代表着统一资源唯一定位符，是名词性质的，不应该带有任何动作。但是由于对http协议的错误理解，我们往往会在其中混入动词。<br>
比如：当我们对学生对象进行删除操作时可能会有以下写法：</p>
<pre><code class="language-html">	GET: http://***/student/delete?id=xxx
	GET: http://***/student/deletebyid/{id}
	GET: http://***/student/{id}/delete
</code></pre>
<p>这仅仅是简单的删除的操作，却有了如此多的书写风格，在规范严格的公司里或许还能依靠规范实现风格的统一。但是当人员流动加大，服务提供商变多时，对API的调用则显得混乱了</p>
<h3 id="关于rest和restful的概述">关于Rest和Restful的概述</h3>
<p><strong>Rest</strong>的全程是Representational State Transfer，表征性状态转移，是一组架构约束条件和原则。我认为可以理解成一种规范<br>
满足Rest规范的架构即可被称作<strong>Restful架构</strong></p>
<h3 id="rest的特点">Rest的特点</h3>
<ul>
<li>
<h4 id="无状态">无状态</h4>
</li>
</ul>
<p>这个含义是服务器不需要知道客户端现在处于什么状态，客户端也不必知道服务器是什么状态。这意味着即使没看到以前的消息，也不影响双方对本次通信的理解。<br>
在web项目里可以理解为，服务端没有保存任何浏览器的状态信息，浏览器发送的任何请求必须要确保足够服务端使用。<br>
比如说：登陆状态的保存，不能依靠服务器去记忆每个浏览器对应的用户而应该用加密的方式把用户签名保存在浏览器中，在向服务器发送请求时，附加上用户签名，让服务器校验。</p>
<ul>
<li>
<h4 id="面向资源对象">面向资源/对象</h4>
</li>
</ul>
<p>符合Rest规范的API，在前后端通信时，URI仅仅用于标记资源。仅仅作为名词形式。<br>
比如：</p>
<pre><code class="language-html">	在A市下新增C企业：PUSH IP:Port/citys/A/companys/C
	删除A市下的C企业:   DELETE IP:Port/citys/A/Companys/C
	更改A市C企业的名字为B：PUT IP:Port/citys/A/Companys/C/name/B
	查询A市下C企业的相关信息：GET IP:Port/citys/A/Companys/C
</code></pre>
<h3 id="rest的组成部分">Rest的组成部分</h3>
<h4 id="请求">请求：</h4>
<ol>
<li>http动词：表示对资源的操作</li>
<li>头部请求信息：指定接收的MIME类型 如：text/css、text/html</li>
<li>资源路径: 寻找资源的路径</li>
<li>包含数据的的消息主体</li>
</ol>
<h4 id="回复">回复：</h4>
<ol>
<li>内容</li>
<li>content-type响应的数据类型</li>
<li>响应状态码（文末会列出基本的状态码）</li>
</ol>
<h3 id="现在存在的问题">现在存在的问题？</h3>
<ol>
<li>为什么Put、Delete方法没有人用？</li>
</ol>
<ul>
<li>答：好像是出于安全考虑，但是我个人认为是程序员们都偷懒了。</li>
</ul>
<ol start="2">
<li>幂等什么？</li>
</ol>
<ul>
<li>指不管调用多少次HTTP方法，结果都是相同的。</li>
</ul>
<ol start="3">
<li>springboot中不支持这些方法怎么办？</li>
</ol>
<ul>
<li><s>谁知道呢</s></li>
</ul>
<h3 id="参考">参考：</h3>
<p><em>感谢以下文章的作者：</em></p>
<p><a href="https://blog.csdn.net/qq_21383435/article/details/80032375#rest-%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81">REST，以及RESTful的讲解</a></p>
<p><a href="https://www.jianshu.com/p/c5c83872dad2">你真的了解REST吗？</a></p>
<p><a href="https://www.jianshu.com/p/21622d81ab26">HTTP与RESTful</a></p>
<p><a href="https://www.cnblogs.com/fu-yong/p/9052623.html">RESTful规范</a></p>
<p><a href="https://www.jianshu.com/p/9d46a730284e">什么是幂等性</a></p>
<p><a href="https://www.cnblogs.com/wei-hj/p/7859707.html">标准Http协议支持六种请求方法</a></p>
<h3 id="附">附：</h3>
<h4 id="http状态码分类">HTTP状态码分类</h4>
<p>分类	分类描述<br>
1**	信息，服务器收到请求，需要请求者继续执行操作<br>
2**	成功，操作被成功接收并处理<br>
3**	重定向，需要进一步的操作以完成请求<br>
4**	客户端错误，请求包含语法错误或无法完成请求<br>
5**	服务器错误，服务器在处理请求的过程中发生了错误</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[以往]]></title>
        <id>https://paz.coding.me/post/yi-wang</id>
        <link href="https://paz.coding.me/post/yi-wang">
        </link>
        <updated>2019-09-08T11:56:47.000Z</updated>
        <summary type="html"><![CDATA[<p>在此留下以前博客的地址：<br>
<s><strong>在腾讯云上搭建WordPress：</strong> 140.143.17.130（已过期）</s><br>
<strong>WordPress：</strong> https://pazyork.wordpress.com/<br>
<strong>CSDN：</strong> https://me.csdn.net/weixin_41525190</p>
]]></summary>
        <content type="html"><![CDATA[<p>在此留下以前博客的地址：<br>
<s><strong>在腾讯云上搭建WordPress：</strong> 140.143.17.130（已过期）</s><br>
<strong>WordPress：</strong> https://pazyork.wordpress.com/<br>
<strong>CSDN：</strong> https://me.csdn.net/weixin_41525190</p>
<!-- more -->
]]></content>
    </entry>
</feed>