<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://pazyork.github.io</id>
    <title>PPP的博客</title>
    <updated>2020-04-16T15:04:06.078Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://pazyork.github.io"/>
    <link rel="self" href="https://pazyork.github.io/atom.xml"/>
    <subtitle>望远能知风浪小，凌空始觉海波平</subtitle>
    <logo>https://pazyork.github.io/images/avatar.png</logo>
    <icon>https://pazyork.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, PPP的博客</rights>
    <entry>
        <title type="html"><![CDATA[Tomcat：server.xml]]></title>
        <id>https://pazyork.github.io/post/tomcatpei-zhi/</id>
        <link href="https://pazyork.github.io/post/tomcatpei-zhi/">
        </link>
        <updated>2019-11-12T13:53:51.000Z</updated>
        <summary type="html"><![CDATA[<p><em>最近在做一个项目，有三个组一起做，实际上做成了三个小项目。做到上周，需要做成War部署到Tomcat上时，出现了一些问题，导致了险些通宵的结果，为了避免再遇到这种情况，决定好好了解下Tomcat的配置。</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>最近在做一个项目，有三个组一起做，实际上做成了三个小项目。做到上周，需要做成War部署到Tomcat上时，出现了一些问题，导致了险些通宵的结果，为了避免再遇到这种情况，决定好好了解下Tomcat的配置。</em></p>
<!-- more -->
<p>首先，我写了一份server.xml的主要标签的中文注解，有不少内容参考的是<a href="https://www.cnblogs.com/kismetv/p/7228274.html">这篇文章</a>,在此对原作者表示感谢。</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;


&lt;!-- Server元素为根元素：shutdown属性表示关闭Server的指令；port属性表示Server接收shutdown指令的端口号，设为-1可以禁掉该端口。 --&gt;
&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot; port=&quot;-1&quot;&gt;
  &lt;!-- Listener(即监听器)定义的组件，可以在特定事件发生时执行特定的操作；被监听的事件通常是Tomcat的启动和停止。 --&gt;
  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;
  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;
  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;
  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;
  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;

  &lt;!-- GlobalNamingResources元素定义了全局资源，通过配置可以看出，该配置是通过读取$TOMCAT_HOME/ conf/tomcat-users.xml实现的。 --&gt;
  &lt;GlobalNamingResources&gt;
    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;
              type=&quot;org.apache.catalina.UserDatabase&quot;
              description=&quot;User database that can be updated and saved&quot;
              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;
              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;
  &lt;/GlobalNamingResources&gt;

  &lt;!-- Connector和Engine元素的集合，一个Service下可以有多个Connector元素 但是只能有一个Engine元素 --&gt;
  &lt;Service name=&quot;Catalina&quot;&gt;

	&lt;!-- 1.配置客户端在8080端口上通过Http协议访问Tomcat，超时时间为20秒。 --&gt;
	&lt;!-- 2.如果资源被强制要求使用https访问，则会被重定向到8443端口 --&gt;
    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;
               connectionTimeout=&quot;20000&quot;
               redirectPort=&quot;8443&quot; /&gt;
    &lt;!-- 1.配置客户端在8009端口上通过AJP协议访问Tomcat。 --&gt;
	&lt;!-- 2.JAP协议负责与其他Http服务器建立联系，比如：
	Tomcat可以作为JSP/Servlet的容器，但是处理静态资源文件Apache更快
	因此出现需要两个服务器集成的情况时，就可以使用该协议 --&gt;
    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;


	
	&lt;!-- 1.Engine组件从一个或多个Connector中接收请求并处理，并将完成的响应返回给Connector，最终传递给客户端。 --&gt;
	&lt;!-- 2.
		a.	name属性用于日志和错误信息，在整个Server中应该唯一。
		b.	defaultHost属性指定了默认的host名称，当发往本机的请求指定的host名称不存在时，一律使用defaultHost指定的host进行处理。
	因此，defaultHost的值，必须与Engine中的一个Host组件的name属性值匹配--&gt;
    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt; 

	  &lt;!-- 略：Realm提供了一种用户密码与web应用的映射关系，从而达到角色安全管理的作用 --&gt;
      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;
        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;
               resourceName=&quot;UserDatabase&quot;/&gt;
      &lt;/Realm&gt;
	   &lt;!-- 1.Engine组件中可以内嵌1个或多个Host组件，每个Host组件代表Engine中的一个虚拟主机。 --&gt;
	   &lt;!-- 2.Host虚拟主机的作用，是运行多个Web应用（一个Context代表一个Web应用），并负责安装、展开、启动和结束每个Web应用。 --&gt;
	   &lt;!-- 3.Host组件代表的虚拟主机，对应了服务器中一个网络名实体(如”www.test.com”，或IP地址”116.25.25.25”)； --&gt;
	   &lt;!-- 4.客户端通常使用主机名来标识它们希望连接的服务器；该主机名也会包含在HTTP请求头中。
	   Tomcat从HTTP头中提取出主机名，寻找名称匹配的主机。如果没有匹配，请求将发送至默认主机。
	   因此默认主机不需要是在DNS服务器中注册的网络名，因为任何与所有Host名称不匹配的请求，都会路由至默认主机。 --&gt;
	   &lt;!-- 5.
		a.	name指定虚拟主机的主机名
		b.	unpackWARs指定了是否将代表Web应用的WAR文件解压；如果为true，通过解压后的文件结构运行该Web应用，如果为false，直接使用WAR文件运行Web应用
		c.	deployOnStartup（自动部署）为true时：Tomcat在启动时检查Web应用，且检测到的所有Web应用视作新应用
		d.	autoDeploy（自动部署）时：Tomcat在运行时定期检查新的Web应用或Web应用的更新
		e.	appBase相对路径，代表Tomcat根目录下webapps文件夹。默认值是webapps
		f.	xmlBase 指定Web应用的XML配置文件所在的目录，默认值为conf/engine_name/host_name --&gt;
      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;
            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;
		&lt;!--1.	 单词Valve的意思是“阀门”，在Tomcat中代表了请求处理流水线上的一个组件；Valve可以与Tomcat的容器(Engine、Host或Context)关联。 --&gt;
		&lt;!--2.	 AccessLogValve的作用是通过日志记录其所在的容器中处理的所有请求，在本例中，Valve放在Host下，便可以记录该Host处理的所有请求。
			AccessLogValve记录的日志就是访问日志，每天的请求会写到一个日志文件里。 --&gt;
		&lt;!--3.	
				a. className：规定了Valve的类型，是最重要的属性；本例中，通过该属性规定了这是一个AccessLogValve。
				b. directory：指定日志存储的位置，本例中，日志存储在$TOMCAT_HOME/logs目录下。
				c. prefix：指定了日志文件的前缀。
				d. suffix：指定了日志文件的后缀。通过directory、prefix和suffix的配置，在$TOMCAT_HOME/logs目录
				e. pattern：指定记录日志的格式 --&gt;
        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;
               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;
               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;
			   
		&lt;!-- 1.Context元素代表在特定虚拟主机上运行的一个Web应用。 --&gt;
		&lt;!-- 2.Context是Host的子容器，每个Host中可以定义任意多的Context元素 --&gt;
		&lt;!-- 3.没有出现Context元素的配置:Tomcat开启了自动部署，Web应用没有在server.xml中配置静态部署，而是由Tomcat通过特定的规则自动部署 --&gt;
		&lt;!-- 4.
			a.	docBase指定了该Web应用使用的WAR包路径，在自动部署场景下，docBase不在appBase目录中，才需要指定。
				如果docBase指定的WAR包或应用目录就在appBase中，则不需要指定。
			b.	path指定了访问该Web应用的上下文路径，当请求到来时，Tomcat根据Web应用的 path属性与URI的匹配程度来选择Web应用处理相应请求
				例如，Web应用app1的path属性是”/app1”，Web应用app2的path属性是”/app2”，那么请求/app1/index.html会交由app1来处理；而请求/app2/index.html会交由app2来处理。
				path属性为””，那么这个Context是虚拟主机的默认Web应用；当请求的uri与所有的path都不匹配时，使用该默认Web应用来处理.
				
				在自动部署场景下，不能指定path属性，path属性由配置文件的文件名、WAR文件的文件名或应用目录的名称自动推导出来。
				如扫描Web应用时，发现了xmlBase目录下的app1.xml，或appBase目录下的app1.WAR或app1应用目录，则该Web应用的path属性是”app1”。
				如果名称不是app1而是ROOT，则该Web应用是虚拟主机默认的Web应用，此时path属性推导为””
				
				静态部署时，可以显式指定path属性，但是仍然受到了严格的限制：
				只有当自动部署完全关闭(deployOnStartup和autoDeploy都为false)或docBase不在appBase中时，才可以设置path属性
			c.	reloadable属性指示tomcat是否在运行时监控在WEB-INF/classes和WEB-INF/lib目录下class文件的改动。如果值为true，那么当class文件改动时，会触发Web应用的重新加载。
				在开发环境下，reloadable设置为true便于调试；
				但是在生产环境中设置为true会给服务器带来性能压力，因此reloadable参数的默认值为false。 --&gt;
		&lt;Context path=&quot;test&quot; docBase=&quot;D:/xxx/yyy/zzz&quot; reloadable=&quot;true&quot; /&gt;

      &lt;/Host&gt;
    &lt;/Engine&gt;
  &lt;/Service&gt;
&lt;/Server&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java：引用数据类型和传值数据类型]]></title>
        <id>https://pazyork.github.io/post/java-yin-yong-shu-ju-lei-xing-he-chuan-zhi-shu-ju-lei-xing/</id>
        <link href="https://pazyork.github.io/post/java-yin-yong-shu-ju-lei-xing-he-chuan-zhi-shu-ju-lei-xing/">
        </link>
        <updated>2019-11-06T02:21:10.000Z</updated>
        <summary type="html"><![CDATA[<p>java相较于c/c++没有指针的概念，但是不同名称的变量共用同一内存地址在java中是存在的。<br>
有必要介绍下不同对象赋值时，java中那些数据是作为引用，那些是作为传值。</p>
]]></summary>
        <content type="html"><![CDATA[<p>java相较于c/c++没有指针的概念，但是不同名称的变量共用同一内存地址在java中是存在的。<br>
有必要介绍下不同对象赋值时，java中那些数据是作为引用，那些是作为传值。</p>
<!-- more -->
<h2 id="引用数据类型">引用数据类型</h2>
<p>这是一个People类，只有性别一个数据成员</p>
<pre><code class="language-java">public class People {
    int sex;    //性别，0为男性，非0为女性
}
</code></pre>
<p>现在我们做一个这个自定义类做一个小实验。</p>
<pre><code class="language-java">    //////////////////////////////////////////
    //引用数据类型
    //////////////////////////////////////////

        // 1
        //
        People LiLei =  new People();
        LiLei.sex=0;
        People hmm=LiLei;

        // 2
        //输出true
        //修改前 韩梅梅和李雷内存地址相同
        System.out.println(hmm==LiLei);

        // 3
        //修改韩梅梅性别为1
        hmm.sex=1;

        // 4
        //输出仍旧为true
        //修改后 韩梅梅和李雷内存地址仍旧相同
        System.out.println(hmm==LiLei);

        // 5
        // 李雷成功变性为1，但是变性的操作是通过韩梅梅实现的，
        // 说明韩梅梅的身份其实只是李雷的马甲，它们是同一个人
        System.out.println(LiLei.sex);
</code></pre>
<p>实验中，我们对韩梅梅性别的变动会同时影响到李雷，而且用“==”符号判断的结果任何情况下都为true。<br>
<strong>说明对于用户定义的类对象的相互赋值，传递的其实是内存地址，而不是其值，是引用行数据类型</strong>。<br>
除此之外的引用型数据类型还有：</p>
<ol>
<li>数组</li>
<li>集合</li>
</ol>
<h2 id="传值数据类型">传值数据类型</h2>
<p>现在我们换成java中的基本数据类型</p>
<pre><code class="language-java">    //////////////////////////////////////////
    //传值数据类型
    //////////////////////////////////////////
        //1. 对ppp_int对象初始值为5
        int ppp_int = 5;

        //2. 使用ppp_int对paz_int初始化
        int paz_int = ppp_int;

        //3. 输出结果为true！！！
        System.out.println(paz_int == ppp_int);
        
        //4. 现在修改paz_int对象
        paz_int = 4;

        //5. 输出结果变为false
        System.out.println(paz_int == ppp_int);
        
        //6. 输出结果为5，说明对paz_int的修改并没有影响到ppp_int
        System.out.println(ppp_int);
</code></pre>
<p>这次我们发现，对paz_int的修改并不会造成ppp_int的变化，因此显然他们并不是共用同一内存地址。<br>
<strong>int是传值型数据。</strong><br>
相信细心的朋友还能发现一点，就是操作【2】 int paz_int = ppp_int; 结束后，ppp_int和paz_int二者的内存地址其实是一样的，只是操作【4】执行后才发生了变化。我猜测这是出于对内存空间的节省做出的选择。因为如果如果不修改，paz_int的值和ppp_int的值其实是一致的，与其使用两份内存空间，不如放在同一内存空间中。</p>
<h2 id="更多">更多</h2>
<p>上一篇<a href="https://sum19.xyz/post/javazi-fu-chuan-pin-jie/">文章</a>的末尾处，我们发现对String对象的修改，会造成String对象内存空间的变化，与其说是修改倒不如说是建立新的对象，销毁久对象。<br>
但是上次文章中是存在不严谨的地方，在此换个方法再验证下。</p>
<pre><code class="language-java">        //1. 获得ppp_int对象的内存位置
        int address_ppp_0 = System.identityHashCode(ppp_int);

        //2. 再次获得ppp_int对象的内存位置        
        int address_ppp_1 = System.identityHashCode(ppp_int);

        //3. 【修改ppp_int后】再获得获得ppp_int的内存位置
        int address_ppp_2 = System.identityHashCode(++ppp_int);

        //4. true 没有发生变化
        System.out.println(address_ppp_0 == address_ppp_1);

        //5. false 发生了变化
        System.out.println(address_ppp_0 == address_ppp_2);
</code></pre>
<p>在这个案例中，我发现即使只是对同一对象的修改，也会造成这个对象内存地址的变化。<br>
有没有感觉java语言的有趣😏</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java：String回顾]]></title>
        <id>https://pazyork.github.io/post/javazi-fu-chuan-pin-jie/</id>
        <link href="https://pazyork.github.io/post/javazi-fu-chuan-pin-jie/">
        </link>
        <updated>2019-11-04T12:51:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="通用">通用</h2>
<pre><code class="language-java">public class test{
    public static void main(String[] args){
        String s1=new String(&quot;abx&quot;);
        String s2=&quot;abX&quot;;

        //内容相等判断
        System.out.println(s1.equals(s2));
        //大小写的字符串相等判断，验证码
        System.out.println(s1.equalsIgnoreCase(s2));

        String s3=s1;
        //s3和s发生时 共用同一内存地址
        //输出true
        System.out.println(s1==s3);
        //修改后使用不同内存地址
        s3=&quot;abX&quot;;
        //输出false
        System.out.println(s1==s3);

        char x=s1.charAt(2);
        //输出'x'
        System.out.println(x);

        //区分大小写，找不到则返回-1
        System.out.println(s3.indexOf(&quot;x&quot;));
        //输出序列从0开始，输出2
        System.out.println(s3.indexOf(&quot;X&quot;));
        //输出1
        System.out.println(s3.indexOf(&quot;bX&quot;));

        String s4=&quot; x X X x &quot;;

        //输出最后一个匹配的字符串所在位置，输出5
        System.out.println(s4.lastIndexOf(&quot;X&quot;));

        //输出&quot;x X X x&quot;
        System.out.println(s4.trim());

        //用第二个参数，替换字符串中的第一个参数，输出&quot;xXXx&quot;
        System.out.println(s4.replace(&quot; &quot;,&quot;&quot;));

    }
}
</code></pre>
<h2 id="字符串拼接">字符串拼接</h2>
<pre><code class="language-java">import com.sun.deploy.util.StringUtils;
import java.util.Arrays;
import java.util.List;

/**
 * @author ppp
 * @date 2019/11/4
 **/
public class JoinString {
    public static  void main(String[] args){
        ////////////////////////////////////////
        //1. 待拼接数组
        ////////////////////////////////////////
        String[] parts={&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;};

        ////////////////////////////////////////
        //2. 不同的方法
        ////////////////////////////////////////

        ////////////////////////////////////////
        //使用类库
        //2.1 com.sun.deploy.util.StringUtils
        //要求第一个入参是java.util下的类型
        ////////////////////////////////////////
        List partl=Arrays.asList(parts);
        String result1= StringUtils.join(partl,&quot;-&quot;);
        System.out.println(result1);
        //输出结果为：&quot;a-b-c-d-e-f&quot;

        ////////////////////////////////////////
        //2.2 自己拼接
        ////////////////////////////////////////
        String result2=&quot;&quot;;
        for (int i=0;i&lt;parts.length-1;i++){
            result2=result2+parts[i]+&quot;-&quot;;
        }
        result2=result2+parts[parts.length-1];
        System.out.println(result2);
        
    }
}

</code></pre>
<h2 id="string-stringbuffer和stringbuilder的一些差异">String、StringBuffer和StringBuilder的一些差异</h2>
<h4 id="stringbuilder和stringbuffer相较于string">StringBuilder和StringBuffer相较于String：</h4>
<ol>
<li>赋值操作前两者是浅拷贝</li>
<li>前两者的值是可以改变的，而String修改值时其实是删除旧的对象，讲修改后的结果放入新的对象中，内存地址已经发生变化了</li>
</ol>
<pre><code class="language-java">/**
 * @author ppp
 * @date 2019/11/5
 **/
public class BufferString {

    public static void main(String[] args) {
        /////////////////////////////////////////////
        //BufferString
        System.out.println(&quot;*****************BufferString线程安全的*****************&quot;);
        /////////////////////////////////////////////
        StringBuffer a = new StringBuffer(&quot;pppppp&quot;);
        StringBuffer b=a;
        System.out.println(a==b);   //输出结果 true
        b.append(&quot;az&quot;);
        System.out.println(a);      //输出结果ppppppaz
        System.out.println(b);      //输出结果ppppppaz
        System.out.println(a==b);   //输出结果true
   
        /////////////////////////////////////////////
        //StringBuilder
        System.out.println(&quot;*****************StringBuilder线程不安全的，性能略高*****************&quot;);
        /////////////////////////////////////////////
        StringBuilder e = new StringBuilder(&quot;pppppp&quot;);
        StringBuilder f=e;
        System.out.println(e==f);   //输出结果 true
        f.append(&quot;az&quot;);
        System.out.println(e);      //输出结果ppppppaz
        System.out.println(f);      //输出结果ppppppaz
        System.out.println(e==f);   //输出结果true

        /////////////////////////////////////////////
        //String
        System.out.println(&quot;*****************String*****************&quot;);
        /////////////////////////////////////////////
        String c = new String(&quot;pppppp&quot;);
        String d=c;
        System.out.println(c==d);   //输出true
        d = c.concat(&quot;az&quot;);
        System.out.println(c);      //输出pppppp
        System.out.println(d);      //输出ppppppaz
        System.out.println(c==d);   //输出false
    }
}
</code></pre>
<h4 id="stringbuilder相较于和stringbuffer">StringBuilder相较于和StringBuffer</h4>
<ol>
<li>后者是进程安全的，后者几乎所有的非静态方法都带有 synchronized 关键字<br>
<img src="https://pazyork.github.io/post-images/1572934729425.png" alt="" loading="lazy"><br>
<img src="https://pazyork.github.io/post-images/1572934738264.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mybatis-文件]]></title>
        <id>https://pazyork.github.io/post/mybatisge-wen-jian-zuo-yong/</id>
        <link href="https://pazyork.github.io/post/mybatisge-wen-jian-zuo-yong/">
        </link>
        <updated>2019-10-25T02:47:11.000Z</updated>
        <summary type="html"><![CDATA[<p>简单介绍下Maven项目中与Mybatis相关的各文件的作用。</p>
]]></summary>
        <content type="html"><![CDATA[<p>简单介绍下Maven项目中与Mybatis相关的各文件的作用。</p>
<!-- more -->
<h1 id="目录">目录</h1>
<ol>
<li>pom.xml</li>
<li>mybatis-config.xml</li>
<li>xxxMapper.xml</li>
<li>xxxMapper.java</li>
<li>xxxDao.java</li>
<li>xxDaoImpl.java</li>
</ol>
<h1 id="介绍">介绍</h1>
<h2 id="1-pomxml">1. pom.xml</h2>
<pre><code>这个了解maven的肯定知道，在这里主要是为了导入mybatis&amp;jdbc依赖。
</code></pre>
<pre><code class="language-xml">        &lt;!--jdbc--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;mysql&lt;/groupId&gt;
            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
            &lt;version&gt;5.1.32&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!--mybatis--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
            &lt;version&gt;3.2.8&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>
<h2 id="2-mybatis-configxml">2. mybatis-config.xml</h2>
<p><strong>这个文件是一个关键文件，负责整个项目中Mybatis的配置。</strong><br>
其标签作用很丰富，如数据库的连接、内外部参数的引入、x0xxMapper.xml的使用、命名规则的转换、缓存设置等。现在介绍其中最重要的几个：</p>
<h3 id="21-标签configuration">2.1  【标签】configuration</h3>
<p>根标签</p>
<h3 id="22-标签properties">2.2  【标签】properties</h3>
<p>属性变量集合，相当于本文件中定义/存放属性变量的位置</p>
<h4 id="221-属性-resource-用于引入外部文件中的属性变量集合">2.2.1 【属性】 resource 用于引入外部文件中的属性变量集合</h4>
<p>mybatis-config.xml 中引入</p>
<pre><code class="language-xml">&lt;properties resource=&quot;jdbc.properties&quot;&gt;
&lt;/properties&gt;
</code></pre>
<p>jdbc.properties 中原始数据</p>
<pre><code class="language-properties">jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://127.0.0.1:3306/ssmdemo?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;allowMultiQueries=true
jdbc.username=root
jdbc.password=root
</code></pre>
<p>在mybatis-config.xml 中使用</p>
<pre><code class="language-xml">&lt;property name=&quot;driver&quot; value=&quot;${jdbc.driverClass}&quot;/&gt;
</code></pre>
<h4 id="222-标签-property定义属性变量">2.2.2 【标签】 property:定义属性变量</h4>
<pre><code class="language-xml">&lt;properties&gt;
        &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/mybatis-110?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;allowMultiQueries=true&quot;/&gt;
        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
    &lt;/properties&gt;
</code></pre>
<p>ps:这种写法是直接在mybatis-config.xml文件中定义属性变量，与利用properties的resource导入属性变量效果一样</p>
<h3 id="23-标签environments-️️️-重要">2.3 【标签】environments ❗️❗️❗️ <strong>重要</strong></h3>
<p>一个工程会有很多模式，比如，开发模式、测试模式和生产模式。不同模式运行的环境是不同的，mybatis运行环境也可能有所差异，因此我们在配置文件mybatis-config.xml的environments标签中也会有不同运行环境相应的配置。</p>
<h4 id="231-标签environment">2.3.1. 【标签】environment:</h4>
<p>具体某种运行环境，一下为某测试test环境：</p>
<pre><code class="language-xml">&lt;environment id=&quot;test&quot;&gt;
            &lt;transactionManager type=&quot;jdbc&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
            .......
            &lt;/dataSource&gt;
&lt;/environment&gt;
</code></pre>
<h5 id="2311-属性-id">2.3.1.1 【属性】 id</h5>
<p>用于唯一标定一个environment</p>
<h5 id="2312-标签-transactionmanager标签">2.3.1.2 【标签】 transactionManager标签</h5>
<p>事务管理标签</p>
<h4 id="23121-属性-type">2.3.1.2.1 【属性】 type</h4>
<p>用于标定事务的属性，不仅只有jdbc类型，还有其他类型，详情可以<a href="https://www.jianshu.com/p/7c6d4dbbe8fc">参考这里</a>。</p>
<h5 id="2313-标签-datasource">2.3.1.3 【标签】 dataSource</h5>
<pre><code class="language-xml">&lt;dataSource type=&quot;POOLED&quot;&gt;
            &lt;!-- 注意${jdbc.xxx}调用的就是2.2.1.1 中jdbc.properties文件中的属性变量 --&gt;
                &lt;property name=&quot;driver&quot; value=&quot;${jdbc.driverClass}&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;
&lt;/dataSource&gt;
</code></pre>
<h6 id="23132-属性-type">2.3.1.3.2 【属性】 type</h6>
<p>标定了数据源类型，有以下三种，详情可以<a href="https://www.cnblogs.com/V1haoge/p/6634880.html">参考这里</a><br>
unpooled：非池型数据源<br>
pooled：池型数据源<br>
jndi：托管型</p>
<h6 id="23131-标签-property">2.3.1.3.1 【标签】 property</h6>
<p>具体存储属性变量 用name-value形式存储<br>
a.  【属性】 name<br>
b.  【属性】 value</p>
<h3 id="24-标签-mappers">2.4 【标签】 mappers</h3>
<p>mapper标签的集合</p>
<h4 id="241-标签-mapper">2.4.1 【标签】 mapper</h4>
<p>与 存储sql的文件xxxMapper.xml 文件关联，如果不关联则这个xxxMapper.xml 无法被发现</p>
<h5 id="2411-属性-resource">2.4.1.1 【属性】 resource</h5>
<p>xxxMapper.xml的位置</p>
<h3 id="25-标签-typealiases">2.5 【标签】 typeAliases</h3>
<p>设置别名，用于速断全限定名长度</p>
<pre><code class="language-xml">&lt;typeAliases&gt;
    &lt;typeAlias alias=&quot;name&quot; type=&quot;org.ppp.user.name&quot;&gt;
&lt;typeAliases/&gt;
</code></pre>
<h3 id="26-标签-settings">2.6 【标签】 settings</h3>
<p>用于设置一些mybatis属性</p>
<pre><code class="language-xml">&lt;!-- 开启驼峰匹配 --&gt;
&lt;settings&gt;
    &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;
&lt;/settings&gt;
</code></pre>
<h2 id="3-application-xxxproperties">3. application-xxx.properties</h2>
<p>在springboot项目中，我们可以采取注解的方式实现很多查询，不再需要写mybatis-config.xml了，甚至不再需要写xxxMapper.xml了。<br>
这部分推荐一个案例：<a href="https://blog.csdn.net/qq_35571554/article/details/82260032">关于Springboot-Mybatis无配置文件注解版的思考</a></p>
<h2 id="4-xxxmapperxml">4. xxxMapper.xml</h2>
<p>这部分强烈推荐看这里 <a href="https://blog.csdn.net/hellozpc/article/details/80878563#9Mapper_XML_1182">Mybatis教程-实战看这一篇就够了</a>。这部分的论述，我很多是直接✍鸟哥的，在此对原作者鸟哥表示🙇‍！</p>
<h3 id="41-crud标签">4.1 CRUD标签</h3>
<pre><code class="language-xml">&lt;select id=&quot;queryUserById&quot; resultType=&quot;com.zpc.mybatis.pojo.User&quot;&gt;
    select * from user where id=${id}
    &lt;!-- 相较于${id}，#{id}会加上双引号，可以防止sql注入 --&gt;
&lt;/select&gt;
</code></pre>
<ol>
<li><strong>select</strong></li>
</ol>
<blockquote></blockquote>
<p>select中的几个属性说明：<br>
id属性：当前名称空间下的statement的唯一标识。必须。要求id和mapper接口中的方法的名字一致。<br>
resultType：将结果集映射为java的对象类型。必须（和 resultMap 二选一）<br>
parameterType：传入参数类型。可以省略</p>
<ol start="2">
<li><strong>insert</strong></li>
</ol>
<blockquote></blockquote>
<p>insert 的几个属性说明：<br>
id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致<br>
parameterType：参数的类型，使用动态代理之后和方法的参数类型一致<br>
useGeneratedKeys:开启主键回写<br>
keyColumn：指定数据库的主键<br>
keyProperty：主键对应的pojo属性名<br>
标签内部：具体的sql语句。</p>
<ol start="3">
<li><strong>update</strong></li>
</ol>
<blockquote></blockquote>
<p>id属性：当前名称空间下的statement的唯一标识(必须属性)；<br>
parameterType：传入的参数类型，可以省略。<br>
标签内部：具体的sql语句。</p>
<ol start="4">
<li><strong>delete</strong></li>
</ol>
<blockquote></blockquote>
<p>delete 的几个属性说明：<br>
id属性：当前名称空间下的statement的唯一标识(必须属性)；<br>
parameterType：传入的参数类型，可以省略。<br>
标签内部：具体的sql语句。</p>
<h3 id="42-resultmap">4.2 resultMap</h3>
<p><img src="https://pazyork.github.io/post-images/1572096899494.png" alt="" loading="lazy"><br>
<img src="https://pazyork.github.io/post-images/1572096906587.png" alt="" loading="lazy"><br>
<img src="https://pazyork.github.io/post-images/1572096912659.png" alt="" loading="lazy"></p>
<h3 id="43-sql片段">4.3 sql片段</h3>
<p>过于繁琐，在此略过</p>
<h2 id="5-xxxmapperjava">5. xxxMapper.java</h2>
<p>用于调用<br>
FireconCartMapper.java文件</p>
<pre><code class="language-java">public interface FireconCartMapper extends Mapper&lt;FireconCart&gt;{
    //可以采用注解的方式来执行Sql
    @Delete({&quot;&lt;script&gt; delete from firecon_cart where account = #{account}; &lt;/script&gt;&quot;})
    int deleteThis(@Param(&quot;account&quot;)String account);
    
    //也可以关联FireconCartMapper.xml文件
    public List&lt;Map&gt; FindFireconCart(String account);
}
</code></pre>
<p>FireconCartMapper.xml文件</p>
<pre><code class="language-xml">&lt;select id=&quot;FindFireconCart&quot; resultMap=&quot;CartInfo&quot;&gt;
		SELECT * from firecon_cart where account = #{account}
&lt;/select&gt;
</code></pre>
<h2 id="6-xxxdaojava">6. xxxDao.java</h2>
<h2 id="6-xxdaoimpljava">6. xxDaoImpl.java</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[cookie+springboot的简单示范]]></title>
        <id>https://pazyork.github.io/post/cookie-jian-dan-shi-yong-shi-fan/</id>
        <link href="https://pazyork.github.io/post/cookie-jian-dan-shi-yong-shi-fan/">
        </link>
        <updated>2019-09-10T15:54:43.000Z</updated>
        <summary type="html"><![CDATA[<p><em>在web项目开发中，会话维持是被经常使用到的技术。但是现在有的博客里有和springboot结合的比较少，有完整代码的就更难找到了，于是最近我会抽时间写下与之相关的技术。</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>在web项目开发中，会话维持是被经常使用到的技术。但是现在有的博客里有和springboot结合的比较少，有完整代码的就更难找到了，于是最近我会抽时间写下与之相关的技术。</em></p>
<!-- more -->
<h3 id="简介">简介</h3>
<p>cookie保存在浏览器中，可以用于存储描述用户/服务端信息。<strong>网站的cookie在浏览器一经设置，此后再向该网站发送请求时，均会带上cookie信息</strong>。由于这个原因它在会话维持中，被使用的特别广泛。比如：某一购物网站，在用户登陆时，服务端要求浏览器保存一条能唯一标识用户身份的信息，此设置完成后，用户进行诸如查看个人信息、订单的时候均会自动带上此cookie。</p>
<h3 id="分类">分类</h3>
<h4 id="1-存储位置">1. 存储位置</h4>
<ul>
<li><strong>内存</strong>：存储于内存中的cookie，当浏览器关闭时便会丢失。</li>
<li><strong>硬盘</strong>：存储于硬盘中的cookie</li>
</ul>
<p>默认均为内存cookie，能保存于硬盘的cookie限制条件会比较多。</p>
<h4 id="2-维持时间">2. 维持时间</h4>
<ul>
<li><strong>长期</strong>：有效期很久</li>
<li><strong>短期</strong>：有效期比较短暂</li>
</ul>
<p>当然，cookie的有效期是可以认为设置的，下面的代码中也会有提及到，详细的可以查看<a href="https://blog.csdn.net/WJLONG_123/article/details/78246995">这里</a>。</p>
<h3 id="其他属性">其他属性</h3>
<ul>
<li>secure ：是否要求通过https传递cookie</li>
<li>Size：大小的设置</li>
<li>http：要求只有http请求头中带有cookie</li>
<li><strong>expires/Max-Age</strong>：超时时间</li>
<li>domain：可以访问此cookie的域名</li>
<li>path：只有域名的该路径下的页面可以访问cookie</li>
<li>name：键</li>
<li>value：值</li>
</ul>
<h3 id="上手">上手</h3>
<h4 id="使用idea建立springboot项目">使用idea建立springboot项目</h4>
<p>一路点下去即可：<br>
<img src="https://pazyork.github.io/post-images/1568171060424.png" alt="" loading="lazy"></p>
<h4 id="在pomxml中导入依赖">在pom.xml中导入依赖</h4>
<pre><code class="language-xml"> &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
</code></pre>
<h4 id="配置web">配置web</h4>
<pre><code>	#thymeleaf：
#前缀 注意最后的“/”
spring.thymeleaf.prefix=classpath:/templates/
#后缀
spring.thymeleaf.suffix=.html
#类型
spring.thymeleaf.servlet.content-type=text/html
#语法
spring.thymeleaf.mode=LEGACYHTML5
#模板缓存
spring.thymeleaf.cache=false
#静态文件位置
spring.mvc.static-path-pattern=/static/**
</code></pre>
<h4 id="建立indexhtml和indexjs文件">建立index.html和index.js文件</h4>
<p>项目目录为：<br>
<img src="https://pazyork.github.io/post-images/1568171689524.png" alt="" loading="lazy"></p>
<pre><code class="language-javascript">//向后台服务器发送请求cookie的请求
function setCookie() {
    $.ajax({
        url:&quot;/cookies&quot;,
        type:&quot;POST&quot;,
        success:function (result) {
            alert(result);
        }
    })
}

//向后台服务器发送字符串的同时获得cookie
function sendWithCookie() {
    $.ajax({
        url:&quot;/cookies/sessionID&quot;,
        type:&quot;GET&quot;,
        success:function (result) {
            alert(result);
        }
    })
}
</code></pre>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;cookie学习&lt;/title&gt;
    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;/static/index.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;button onclick=&quot;setCookie()&quot;&gt;设置cookie&lt;/button&gt;
&lt;button onclick=&quot;sendWithCookie()&quot;&gt;发送带cookie请求&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="建立controller类">建立Controller类</h4>
<pre><code class="language-java">@Controller
public class MainController {
    private static final String TAG=&quot;MainController&quot;;

    @RequestMapping(&quot;/&quot;)
    public String index(){
        return &quot;index&quot;;
    }
	 //获取带有cookie的普通http请求
    @ResponseBody
    @RequestMapping(value = &quot;/cookies/{key}&quot;)
    public String getCookies(HttpServletRequest request, 
		@PathVariable String key){
        String result=&quot;未获取到sessionID&quot;;
        Cookie[] cookies = request.getCookies();
        if (cookies!=null){
						//需要遍历
            for (Cookie cookie:cookies){
                if (&quot;sessionID&quot;.equals(cookie.getName())){
                    result = &quot;sessionID:&quot; + cookie.getValue();
                }
            }
        }
        return result;
    }
		//设置cookie
    @ResponseBody
    @RequestMapping(value = &quot;/cookies&quot;, method = RequestMethod.POST)
    public String setCookies(HttpServletResponse response) {
        String result = &quot;服务器出现错误&quot;;
        response.setStatus(500);
        try{
            Cookie cookie = new Cookie(&quot;sessionID&quot;, &quot;PPP&quot;);
            //设置有效期 单位是秒，不是毫秒
            cookie.setMaxAge(20*60);
            response.addCookie(cookie);
            response.setStatus(200);
            result = &quot;cookie设置完成&quot;;
        }catch (Exception e){
            System.err.println(TAG+&quot; :发生错误&quot;);
            System.err.println(e.getMessage());
        }
        return result;
    }
}
</code></pre>
<h3 id="测试">测试</h3>
<figure data-type="image" tabindex="1"><img src="https://pazyork.github.io/post-images/1568177243936.png" alt="" loading="lazy"></figure>
<center>设置cookie</center>
<figure data-type="image" tabindex="2"><img src="https://pazyork.github.io/post-images/1568177455911.png" alt="" loading="lazy"></figure>
<center>可以看到浏览器中已经保存了cookie</center>
<figure data-type="image" tabindex="3"><img src="https://pazyork.github.io/post-images/1568177627756.png" alt="" loading="lazy"></figure>
<center>后台也拿到了cookie，并作为返回值，返回给了前台</center>
<h3 id="参考感谢">参考&amp;感谢</h3>
<p><a href="https://blog.csdn.net/WJLONG_123/article/details/78246995">cookie属性及有效期的设置</a></p>
<p><a href="https://www.cnblogs.com/bq-med/p/8603664.html">Http协议中Cookie详细介绍</a></p>
<p><a href="https://www.cnblogs.com/SiriYang/p/10680483.html">Springboot使用Cookie，生成cookie，获取cookie信息（注解与非注解方式）</a></p>
<p><a href="https://www.cnblogs.com/xiaocongcong888/p/9436274.html">SPRINGBOOTDAY03 COOKIE和SESSION 购物车技术</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前后端分离中的Rest&Restful架构]]></title>
        <id>https://pazyork.github.io/post/qian-hou-duan-fen-chi-zhong-de-rest-he-restful-jia-gou/</id>
        <link href="https://pazyork.github.io/post/qian-hou-duan-fen-chi-zhong-de-rest-he-restful-jia-gou/">
        </link>
        <updated>2019-09-08T14:31:43.000Z</updated>
        <summary type="html"><![CDATA[<p><em>----最近在接触spring cloud的时候，经常会看见Rest&amp;Restful的字眼，又对这两个词完全没有印象，于是去了解了下，现在我们从传统API的缺点开始讲起</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>----最近在接触spring cloud的时候，经常会看见Rest&amp;Restful的字眼，又对这两个词完全没有印象，于是去了解了下，现在我们从传统API的缺点开始讲起</em></p>
<!--more-->
<h3 id="传统api接口">传统API接口</h3>
<p>以我的观点，应用是以数据为逻辑中心的，对于数据的操作不外乎增删改查四种。http协议针对这四种操作分别提供了POST、DELETE，PUT、GET四种方法，简单优雅。但是我们以往在写服务端API的时候，往往会用GET和POST解决一切，背离http协议设计的初衷。更窒息的是，混乱还不仅仅如此。<br>
URL代表着统一资源唯一定位符，是名词性质的，不应该带有任何动作。但是由于对http协议的错误理解，我们往往会在其中混入动词。<br>
比如：当我们对学生对象进行删除操作时可能会有以下写法：</p>
<pre><code class="language-html">	GET: http://***/student/delete?id=xxx
	GET: http://***/student/deletebyid/{id}
	GET: http://***/student/{id}/delete
</code></pre>
<p>这仅仅是简单的删除的操作，却有了如此多的书写风格，在规范严格的公司里或许还能依靠规范实现风格的统一。但是当人员流动加大，服务提供商变多时，对API的调用则显得混乱了</p>
<h3 id="关于rest和restful的概述">关于Rest和Restful的概述</h3>
<p><strong>Rest</strong>的全程是Representational State Transfer，表征性状态转移，是一组架构约束条件和原则。我认为可以理解成一种规范<br>
满足Rest规范的架构即可被称作<strong>Restful架构</strong></p>
<h3 id="rest的特点">Rest的特点</h3>
<ul>
<li>
<h4 id="无状态">无状态</h4>
</li>
</ul>
<p>这个含义是服务器不需要知道客户端现在处于什么状态，客户端也不必知道服务器是什么状态。这意味着即使没看到以前的消息，也不影响双方对本次通信的理解。<br>
在web项目里可以理解为，服务端没有保存任何浏览器的状态信息，浏览器发送的任何请求必须要确保足够服务端使用。<br>
比如说：登陆状态的保存，不能依靠服务器去记忆每个浏览器对应的用户而应该用加密的方式把用户签名保存在浏览器中，在向服务器发送请求时，附加上用户签名，让服务器校验。</p>
<ul>
<li>
<h4 id="面向资源对象">面向资源/对象</h4>
</li>
</ul>
<p>符合Rest规范的API，在前后端通信时，URI仅仅用于标记资源。仅仅作为名词形式。<br>
比如：</p>
<pre><code class="language-html">	在A市下新增C企业：PUSH IP:Port/citys/A/companys/C
	删除A市下的C企业:   DELETE IP:Port/citys/A/Companys/C
	更改A市C企业的名字为B：PUT IP:Port/citys/A/Companys/C/name/B
	查询A市下C企业的相关信息：GET IP:Port/citys/A/Companys/C
</code></pre>
<h3 id="rest的组成部分">Rest的组成部分</h3>
<h4 id="请求">请求：</h4>
<ol>
<li>http动词：表示对资源的操作</li>
<li>头部请求信息：指定接收的MIME类型 如：text/css、text/html</li>
<li>资源路径: 寻找资源的路径</li>
<li>包含数据的的消息主体</li>
</ol>
<h4 id="回复">回复：</h4>
<ol>
<li>内容</li>
<li>content-type响应的数据类型</li>
<li>响应状态码（文末会列出基本的状态码）</li>
</ol>
<h3 id="现在存在的问题">现在存在的问题？</h3>
<ol>
<li>为什么Put、Delete方法没有人用？</li>
</ol>
<ul>
<li>答：好像是出于安全考虑，但是我个人认为是程序员们都偷懒了。</li>
</ul>
<ol start="2">
<li>幂等什么？</li>
</ol>
<ul>
<li>指不管调用多少次HTTP方法，结果都是相同的。</li>
</ul>
<ol start="3">
<li>springboot中不支持这些方法怎么办？</li>
</ol>
<ul>
<li><s>谁知道呢</s></li>
</ul>
<h3 id="参考">参考：</h3>
<p><em>感谢以下文章的作者：</em></p>
<p><a href="https://blog.csdn.net/qq_21383435/article/details/80032375#rest-%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81">REST，以及RESTful的讲解</a></p>
<p><a href="https://www.jianshu.com/p/c5c83872dad2">你真的了解REST吗？</a></p>
<p><a href="https://www.jianshu.com/p/21622d81ab26">HTTP与RESTful</a></p>
<p><a href="https://www.cnblogs.com/fu-yong/p/9052623.html">RESTful规范</a></p>
<p><a href="https://www.jianshu.com/p/9d46a730284e">什么是幂等性</a></p>
<p><a href="https://www.cnblogs.com/wei-hj/p/7859707.html">标准Http协议支持六种请求方法</a></p>
<h3 id="附">附：</h3>
<h4 id="http状态码分类">HTTP状态码分类</h4>
<p>分类	分类描述<br>
1**	信息，服务器收到请求，需要请求者继续执行操作<br>
2**	成功，操作被成功接收并处理<br>
3**	重定向，需要进一步的操作以完成请求<br>
4**	客户端错误，请求包含语法错误或无法完成请求<br>
5**	服务器错误，服务器在处理请求的过程中发生了错误</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[以往]]></title>
        <id>https://pazyork.github.io/post/yi-wang/</id>
        <link href="https://pazyork.github.io/post/yi-wang/">
        </link>
        <updated>2019-09-08T11:56:47.000Z</updated>
        <summary type="html"><![CDATA[<p>在此留下以前博客的地址：<br>
<s><strong>在腾讯云上搭建WordPress：</strong> 140.143.17.130（已过期）</s><br>
<strong>WordPress：</strong> https://pazyork.wordpress.com/<br>
<strong>CSDN：</strong> https://me.csdn.net/weixin_41525190</p>
]]></summary>
        <content type="html"><![CDATA[<p>在此留下以前博客的地址：<br>
<s><strong>在腾讯云上搭建WordPress：</strong> 140.143.17.130（已过期）</s><br>
<strong>WordPress：</strong> https://pazyork.wordpress.com/<br>
<strong>CSDN：</strong> https://me.csdn.net/weixin_41525190</p>
<!-- more -->
]]></content>
    </entry>
</feed>